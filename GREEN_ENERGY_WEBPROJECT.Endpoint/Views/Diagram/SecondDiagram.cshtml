@{
    ViewData["Title"] = "Waste Generation Diagram";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
    var isAdmin = User.Identity.IsAuthenticated && User.Identity.Name == "admin@green.com";
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .save-button {
        background-color: #00796b;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: background-color 0.3s ease;
    }

        .save-button:hover {
            background-color: #005b50;
        }

    .diag-background {
        background-image: url('../images/leaf_4.png');
        min-height: 100vh;
        padding: 50px 20px;
        display: flex;
        justify-content: center;
        align-items: flex-start;
    }

    .diag-content {
        background-color: #c7dbbf;
        padding: 40px;
        border-radius: 20px;
        max-width: 1200px;
        width: 100%;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 17px;
        opacity: .95;
    }

    .section-title {
        font-size: 22px;
        font-weight: bold;
        color: #00796b;
        margin-bottom: 20px;
    }

    form {
        margin-bottom: 30px;
    }

    select, button {
        padding: 10px;
        margin-right: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    button {
        background-color: #00796b;
        color: white;
        cursor: pointer;
    }
</style>

<div class="diag-background">
    <div class="diag-content">
        <div class="section-title">Waste Generation by Company (2019–2023)</div>

        <form method="get" action="@Url.Action("SecondDiagram", "Diagram")">
            <label for="factory">Factory:</label>
            @Html.DropDownList("factoryId", (SelectList)ViewBag.Factories, "Select a factory", new { @class = "form-control", style = "width: 200px; display: inline-block;" })

            <label for="year">Year:</label>
            @Html.DropDownList("year", (SelectList)ViewBag.Years, "Select a year", new { @class = "form-control", style = "width: 200px; display: inline-block;" })

            <button type="submit">Filter</button>
        </form>

        <canvas id="wasteChart" width="1000" height="400"></canvas>

        @if (isAdmin)
        {
            <form asp-action="SaveSecondDiagramDescription" method="post">
                <textarea name="description" style="width:100%; height:200px; padding:10px; font-size:1rem;">@ViewBag.SecondDiagramDescription</textarea>
                <br /><br />
                <button type="submit" class="save-button">Save</button>
            </form>
        }
        else
        {
            <p style="text-align: center; font-weight: bold;">
                @Html.Raw(ViewBag.SecondDiagramDescription)
            </p>
        }

        @* <p style="text-align: center; font-weight: bold;">
            The diagram displays the average amount of waste generated by each company between 2019 and 2023.
            It allows comparison of trends in waste generation and highlights companies' efforts toward waste reduction or the impact of operational growth.
        </p> *@
    </div>
</div>

@section Scripts {
    <script>
        const wasteData = @Html.Raw(ViewBag.WasteDataJson ?? "[]");

        if (wasteData.length === 0) {
            document.getElementById('wasteChart').remove();
            const msg = document.createElement('p');
            msg.textContent = "Nincs megjeleníthető adat a kiválasztott szűrőkkel.";
            msg.style.textAlign = 'center';
            msg.style.fontWeight = 'bold';
            msg.style.fontSize = '18px';
            document.querySelector('.diag-content').appendChild(msg);
        } else {
            const colors = ['#4caf50', '#ff9800', '#2196f3', '#9c27b0', '#f44336', '#00bcd4', '#795548'];

            const yearsSet = new Set();
            const companyYearWaste = {};

            wasteData.forEach(item => {
                if (!companyYearWaste[item.FactoryName]) {
                    companyYearWaste[item.FactoryName] = {};
                }
                if (item.AvgWaste !== null) {
                    companyYearWaste[item.FactoryName][item.Year] = item.AvgWaste;
                    yearsSet.add(item.Year);
                }
            });

            const years = Array.from(yearsSet).sort();
            const companies = Object.keys(companyYearWaste);

            const wasteDatasets = companies
                .filter(company => years.some(y => companyYearWaste[company][y] !== undefined))
                .map((company, i) => ({
                    label: company,
                    data: years.map(y => companyYearWaste[company][y]),
                    backgroundColor: colors[i % colors.length]
                }));

            new Chart(document.getElementById('wasteChart'), {
                type: 'bar',
                data: {
                    labels: years,
                    datasets: wasteDatasets
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        tooltip: { enabled: true },
                        datalabels: {
                            anchor: 'end',
                            align: 'top',
                            formatter: val => val?.toFixed(2) + ' t'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'Waste (tons)' }
                        },
                        x: {
                            title: { display: true, text: 'Year' }
                        }
                    }
                }
            });
        }


    </script>
}

@{
    ViewData["Title"] = "Diagrams";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-geo@4.1.1/build/index.umd.min.js"></script>

<style>
    .diag-background {
        background-image: url('../images/leaf_4.png');
        min-height: 100vh;
        padding: 50px 20px;
        display: flex;
        justify-content: center;
        align-items: flex-start;
    }

    .diag-content {
        background-color: #c7dbbf;
        padding: 40px;
        border-radius: 20px;
        max-width: 1200px;
        width: 100%;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 17px;
        opacity: .95;
    }

    .section-title {
        font-size: 22px;
        font-weight: bold;
        color: #00796b;
        margin-bottom: 20px;
    }

    form {
        margin-bottom: 30px;
    }

    select, button {
        padding: 10px;
        margin-right: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    button {
        background-color: #00796b;
        color: white;
        cursor: pointer;
    }
</style>

<div class="diag-background">
    <div class="diag-content">
        <div class="section-title">Sustainability Diagrams (2019–2023)</div>

        <form method="get" action="@Url.Action("Diagrams", "Diagram")">
            <label for="factory">Factory:</label>
            @Html.DropDownList("factoryId", (SelectList)ViewBag.Factories, "Select a factory", new { @class = "form-control", style = "width: 200px; display: inline-block;" })

            <label for="year">Year:</label>
            @Html.DropDownList("year", (SelectList)ViewBag.Years, "Select a year", new { @class = "form-control", style = "width: 200px; display: inline-block;" })

            <button type="submit">Filter</button>
        </form>

        <h3>PUE Averages per Company</h3>
        <canvas id="pueChart" width="1000" height="400"></canvas>

        <h3 style="margin-top: 60px;">Waste Generated per Company</h3>
        <canvas id="wasteChart" width="1000" height="400"></canvas>

        <h3 style="margin-top: 60px;">Water Withdrawal by Region</h3>
        <canvas id="waterMap" width="1000" height="600"></canvas>
    </div>
</div>

@section Scripts {
    <script>
        const colors = ['#4caf50', '#ff9800', '#2196f3', '#9c27b0', '#f44336', '#00bcd4', '#795548'];

        // --- PUE Chart ---
        const pueData = @Html.Raw(ViewBag.PUEDataJson ?? "[]");
        const pueGrouped = {};
        pueData.forEach(item => {
            if (!pueGrouped[item.FactoryName]) pueGrouped[item.FactoryName] = {};
            pueGrouped[item.FactoryName][item.Year] = item.AvgPUE;
        });
        const years = [...new Set(pueData.map(p => p.Year))].sort();
        const companies = Object.keys(pueGrouped);
        const pueDatasets = companies.map((company, i) => ({
            label: company,
            data: years.map(y => pueGrouped[company][y] ?? null),
            backgroundColor: colors[i % colors.length]
        }));
        new Chart(document.getElementById('pueChart'), {
            type: 'bar',
            data: { labels: years, datasets: pueDatasets },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    tooltip: { enabled: true }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        min: 0.9,
                        max: 1.6,
                        title: { display: true, text: 'PUE Value' }
                    },
                    x: { title: { display: true, text: 'Year' } }
                }
            }
        });

        // --- Waste Chart ---
        const wasteData = @Html.Raw(ViewBag.WasteDataJson ?? "[]");
        const wasteGrouped = {};
        wasteData.forEach(item => {
            if (!wasteGrouped[item.FactoryName]) wasteGrouped[item.FactoryName] = {};
            wasteGrouped[item.FactoryName][item.Year] = item.AvgWaste;
        });
        const wasteYears = [...new Set(wasteData.map(p => p.Year))].sort();
        const wasteCompanies = Object.keys(wasteGrouped);
        const wasteDatasets = wasteCompanies.map((company, i) => ({
            label: company,
            data: wasteYears.map(y => wasteGrouped[company][y] ?? null),
            backgroundColor: colors[i % colors.length]
        }));
        new Chart(document.getElementById('wasteChart'), {
            type: 'bar',
            data: { labels: wasteYears, datasets: wasteDatasets },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    tooltip: { enabled: true }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Waste (tons)' }
                    },
                    x: { title: { display: true, text: 'Year' } }
                }
            }
        });

        // --- Water Map ---
        const waterData = @Html.Raw(ViewBag.WaterMapDataJson ?? "[]");

        fetch('https://unpkg.com/world-atlas/countries-110m.json').then(res => res.json()).then(worldData => {
            const countries = ChartGeo.topojson.feature(worldData, worldData.objects.countries).features;
            const ctx = document.getElementById('waterMap').getContext('2d');
            new Chart(ctx, {
                type: 'choropleth',
                data: {
                    labels: countries.map(d => d.properties.name),
                    datasets: [{
                        label: 'Water Withdrawal',
                        data: waterData,
                        outline: ChartGeo.topojson.mesh(worldData, worldData.objects.countries, (a, b) => a !== b)
                    }]
                },
                options: {
                    showOutline: true,
                    showGraticule: true,
                    scales: {
                        xy: { projection: 'equalEarth' },
                        color: {
                            quantize: 5,
                            legend: { position: 'right' }
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        });
    </script>
}
